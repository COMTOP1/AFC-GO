{{define "title"}}Users{{end}}
{{define "content"}}
    <style>
        .pell {
            border: 1px solid hsla(0, 0%, 4%, .1)
        }

        .pell, .pell-content {
            box-sizing: border-box
        }

        .pell-content {
            height: 500px;
            outline: 0;
            overflow-y: auto;
            padding: 10px 20px 10px 20px;
            background-color: white;
            text-align: left;
        }

        .pell-actionbar {
            background-color: #fff;
            border-bottom: 1px solid hsla(0, 0%, 4%, .1)
        }

        .pell-button {
            background-color: transparent;
            border: none;
            cursor: pointer;
            height: 30px;
            outline: 0;
            width: 30px;
            vertical-align: bottom
        }

        .pell-button-selected {
            background-color: #f0f0f0
        }

        hCustom {
            text-decoration: underline;
            text-decoration-color: red;
            font-weight: bold;
            font-size: 1.5em;
            margin: 15px 0 15px 0;
            color: #1F1F1F;
        }
    </style>
    <main class="main" style="text-align: center; justify-content: center; align-content: center; align-items: center;">
        <div class="pageHeaderBanner">
            <h2 class="pageHeader">
                Info Editor
            </h2>
            {{if or (eq .User.Role "Club Secretary") (or (eq .User.Role "Chairperson") (eq .User.Role "Webmaster"))}}
                <p>If this is left blank or in draft status then there will be a default placeholder used</p>
            {{end}}
        </div>

        <div id="editor" class="pell"></div>
        <br>
        <a class="button is-info" onclick="submitInfoModal()">Submit content</a>
        <br>
        <details style="margin-top: 1em;">
            <summary style="cursor: pointer; font-weight: bold;">Show Debug HTML Output</summary>
            <div style="padding: 0.5em 1em; background: #f9f9f9; border: 1px solid #ccc; border-radius: 4px; margin-top: 0.5em;">
                <hcustom>Debug only</hcustom>
                <div>This is for debug use only, please disregard!</div>
                <div>
                    HTML output:
                    <br>
                    <pre id="html-output" style="white-space: pre-wrap; padding: 0.5em; border: 1px solid #ddd; margin-top: 0.5em;"></pre>
                </div>
            </div>
        </details>
    </main>
    {{if or (eq .User.Role "Club Secretary") (or (eq .User.Role "Chairperson") (eq .User.Role "Webmaster"))}}
        {{template "modal" .}}
    {{end}}
{{end}}

{{define "modal"}}
    <div id="submitInfoModal" class="modal">
        <div class="modal-background"></div>
        <div class="modal-content">
            <div class="box">
                <article class="media">
                    <div class="media-content">
                        <div class="content">
                            <p class="title">Submit content</p>
                            <p>This change will be publicly visible, please ensure it is correct!</p>
                            <form id="submit-form" action="/info/edit" method="POST">
                                <input type="hidden" name="htmlContent" id="html-input">
                                <button class="button is-info" type="submit">Submit content</button>
                            </form>
                        </div>
                    </div>
                </article>
            </div>
        </div>
        <button class="modal-close is-large" aria-label="close"></button>
    </div>
    <script>
        let htmlText = "{{.InfoContent}}";

        document.querySelectorAll(
            ".modal-background, .modal-close,.modal-card-head .delete, .modal-card-foot .button"
        ).forEach(($el) => {
            const $modal = $el.closest(".modal");
            $el.addEventListener("click", () => {
                $modal.classList.remove("is-active");
            });
        });

        function submitInfoModal() {
            document.getElementById("submitInfoModal").classList.add("is-active");
        }

        !function (t, e) {
            "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e(t.pell = {});
        }(this, function (t) {
            "use strict";
            let e = Object.assign || function (t) {
                for (let e = 1; e < arguments.length; e++) {
                    let n = arguments[e];
                    for (let r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
                }
                return t;
            }, c = "defaultParagraphSeparator", l = "formatBlock", a = function (t, e, n) {
                return t.addEventListener(e, n);
            }, s = function (t, e) {
                return t.appendChild(e);
            }, d = function (t) {
                return document.createElement(t);
            }, n = function (t) {
                return document.queryCommandState(t);
            }, f = function (t) {
                let e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
                const did = document.execCommand(t, !1, e);
                console.log(t, arguments, e, did)
                return did;
            }, f1 = function (t) {
                let e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
                const did = document.execCommand("insertHTML", false, "<hcustom>"+ document.getSelection()+"</hcustom>");
                console.log(t, arguments, e, did)
                return did;
            }, p = {
                bold: {
                    icon: "<b>B</b>", title: "Bold", state: function () {
                        return n("bold");
                    }, result: function () {
                        return f("bold");
                    }
                }, italic: {
                    icon: "<i>I</i>", title: "Italic", state: function () {
                        return n("italic");
                    }, result: function () {
                        return f("italic");
                    }
                }, underline: {
                    icon: "<u>U</u>", title: "Underline", state: function () {
                        return n("underline");
                    }, result: function () {
                        return f("underline");
                    }
                }, strikethrough: {
                    icon: "<span style='text-decoration: line-through;'>S</span>", title: "Strike-through", state: function () {
                        return n("strikeThrough");
                    }, result: function () {
                        return f("strikeThrough");
                    }
                }, heading1: {
                    icon: "<b>H<sub>1</sub></b>", title: "Heading 1", result: function () {
                        return f(l, "<h1>");
                    }
                }, heading: {
                    icon: "<b>H</b>", title: "Heading", result: function () {
                        return f1(l, "<hCustom>");
                    }
                }, paragraph: {
                    icon: "&#182;", title: "Paragraph", result: function () {
                        return f(l, "<p>");
                    }
                }, quote: {
                    icon: "&#8220; &#8221;", title: "Quote", result: function () {
                        return f(l, "<blockquote>");
                    }
                }, olist: {
                    icon: "&#35;", title: "Ordered List", result: function () {
                        return f("insertOrderedList");
                    }
                }, ulist: {
                    icon: "&#8226;", title: "Unordered List", result: function () {
                        return f("insertUnorderedList");
                    }
                }, code: {
                    icon: "&lt;/&gt;", title: "Code", result: function () {
                        return f(l, "<pre>");
                    }
                }, line: {
                    icon: "&#8213;", title: "Horizontal Line", result: function () {
                        return f("insertHorizontalRule");
                    }
                }, link: {
                    icon: "&#128279;", title: "Link", result: function () {
                        let t = window.prompt("Enter the link URL");
                        t && f("createLink", t);
                    }
                }, image: {
                    icon: "&#128247;", title: "Image", result: function () {
                        let t = window.prompt("Enter the image URL");
                        t && f("insertImage", t);
                    }
                }, lJustify: {
                    icon: "L&larr;", title: "Left justify", result: function () {
                        return f("justifyLeft");
                    }
                }, cJustify: {
                    icon: "&rarr;C&larr;", title: "Centre justify", result: function () {
                        return f("justifyCenter");
                    }
                }, rJustify: {
                    icon: "&rarr;R", title: "Right justify", result: function () {
                        return f("justifyRight");
                    }
                }
            }, m = {
                actionbar: "pell-actionbar",
                button: "pell-button",
                content: "pell-content",
                selected: "pell-button-selected"
            }, r = function (n) {
                let t = n.actions ? n.actions.map(function (t) {
                    return "string" == typeof t ? p[t] : p[t.name] ? e({}, p[t.name], t) : t;
                }) : Object.keys(p).map(function (t) {
                    return p[t];
                }), r = e({}, m, n.classes), i = n[c] || "div", o = d("div");
                o.className = r.actionbar, s(n.element, o);
                let u = n.element.content = d("div");
                return u.contentEditable = !0, u.className = r.content, u.oninput = function (t) {
                    let e = t.target.firstChild;
                    e && 3 === e.nodeType ? f(l, "<" + i + ">") : "<br>" === u.innerHTML && (u.innerHTML = ""), n.onChange(u.innerHTML);
                }, u.onkeydown = function (t) {
                    let e;
                    "Enter" === t.key && "blockquote" === (e = l, document.queryCommandValue(e)) && setTimeout(function () {
                        return f(l, "<" + i + ">");
                    }, 0);
                }, s(n.element, u), t.forEach(function (t) {
                    let e = d("button");
                    if (e.className = r.button, e.innerHTML = t.icon, e.title = t.title, e.setAttribute("type", "button"), e.onclick = function () {
                        return t.result() && u.focus();
                    }, t.state) {
                        let n = function () {
                            return e.classList[t.state() ? "add" : "remove"](r.selected);
                        };
                        a(u, "keyup", n), a(u, "mouseup", n), a(e, "click", n);
                    }
                    s(o, e);
                }), n.styleWithCSS && f("styleWithCSS"), f(c, i), n.element;
            }, i = {exec: f, init: r};
            t.exec = f, t.init = r, t.default = i, Object.defineProperty(t, "__esModule", {value: !0});
        });

        pell.init({
            // <HTMLElement>, required
            element: document.getElementById("editor"),

            // <Function>, required
            // Use the output HTML, triggered by element's `oninput` event
            onChange: html => {
                document.getElementById('html-output').textContent = html
                htmlText = html;

                document.getElementById("html-input").value = htmlText;
            },

            // <string>, optional, default = 'div'
            // Instructs the editor which element to inject via the return key
            defaultParagraphSeparator: "div",

            // <boolean>, optional, default = false
            // Outputs <span style="font-weight: bold;"></span> instead of <b></b>
            styleWithCSS: true,

            // <Array[string | Object]>, string if overwriting, object if customising/creating
            // action.name<string> (only required if overwriting)
            // action.icon<string> (optional if overwriting, required if custom action)
            // action.title<string> (optional)
            // action.result<Function> (required)
            // Specify the actions you specifically want (in order)
            actions: [
                "bold",
                "italic",
                "underline",
                "strikethrough",
                "heading",
                "lJustify",
                "cJustify",
                "rJustify",
                "paragraph",
                "quote",
                "olist",
                "ulist",
                "code",
                "line",
                "link",
            ],

            // classes<Array[string]> (optional)
            // Choose your custom class names
            classes: {
                actionbar: "pell-actionbar",
                button: "pell-button",
                content: "pell-content",
                selected: "pell-button-selected"
            }
        });

        document.getElementsByClassName("pell-content")[0].innerHTML = htmlText;
        document.getElementById('html-output').textContent = document.getElementsByClassName("pell-content")[0].innerHTML;
        document.getElementById("html-input").value = htmlText;

        document.getElementById("submit-form").addEventListener("submit", function (e) {
            if (!htmlText.trim()) {
                e.preventDefault();
                alert("Content cannot be empty.");
            }
        });
    </script>
{{end}}